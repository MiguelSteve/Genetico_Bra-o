/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import java.util.ArrayList;
import java.util.List;
import funcoes.Calculos;
import java.util.Random;

/**
 *
 * @author Migue
 */
public class Menu extends javax.swing.JFrame {

    Calculos calculo = new Calculos();
    public static float[][] Custo_O;
    public static float[][] Custo_T;
    Random random = new Random();
    public static float avalia;
    public static int indice;
    
    //Variaveis resultados
    static int[] solucao;
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Campo_Tam_Prob = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Campo_Resultado = new javax.swing.JTextArea();
        Btn_Iniciar_Alg = new javax.swing.JButton();
        Campo_Pop = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Campo_Muta = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Campo_Tam_Prob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Campo_Tam_ProbActionPerformed(evt);
            }
        });

        jLabel1.setText("Tamanho do problema");

        Campo_Resultado.setEditable(false);
        Campo_Resultado.setColumns(20);
        Campo_Resultado.setRows(5);
        jScrollPane1.setViewportView(Campo_Resultado);

        Btn_Iniciar_Alg.setText("Inciar");
        Btn_Iniciar_Alg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Iniciar_AlgActionPerformed(evt);
            }
        });

        Campo_Pop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Campo_PopActionPerformed(evt);
            }
        });

        jLabel2.setText("Tamanho da Populacao");

        Campo_Muta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Campo_MutaActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Taxa Mutacao (apenas abaixo de 1 e maior que 0)");
        jLabel3.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Campo_Muta, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(42, 42, 42)))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addComponent(Campo_Tam_Prob, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Campo_Pop, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Iniciar_Alg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Campo_Muta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Campo_Tam_Prob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Campo_Pop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addComponent(Btn_Iniciar_Alg, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Campo_Tam_ProbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Campo_Tam_ProbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Campo_Tam_ProbActionPerformed

    private void mostrarResultado(String mensagem) {
        Campo_Resultado.append(mensagem + "\n");
    }

    private void Btn_Iniciar_AlgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Iniciar_AlgActionPerformed
        // TODO add your handling code here:
        
            //definindo valores da funcao GerarProblema
        int qtd = Integer.parseInt(Campo_Tam_Prob.getText());
        calculo.setTamanhoProblema(qtd);
        float minO = 5;
        float maxO = 40;
        float minT = 1;
        float maxT = 5;

        
        
        calculo.setMaxO(maxO);
        calculo.setMinO(minO);
        
        calculo.setMaxT(maxT);
        calculo.setMinT(minT);
        
        //Armazenando o resultado da funcao na matriz representando o angulo
        Custo_O = calculo.gerarProblema(qtd, minO, maxO, random);
        Custo_T = calculo.gerarProblema(qtd, minT, maxT, random);
        
        
        Campo_Resultado.setText("");

        //Imprimindo o resultado da matriz
        for(int i=0; i<Custo_O.length; i++){
            for(int j=0; j<Custo_T.length; j++){
                
                Campo_Resultado.append(String.format("%.2f\n", Custo_O[i][j]));


                System.out.println("" + String.format("%.2f", Custo_O[i][j]));

                
            }
        }
                        Campo_Resultado.append("=======================================\n");
                        System.out.println("===============================================");


        for(int i=0; i<Custo_T.length; i++){
            for(int j=0; j<Custo_T.length; j++){
                
                Campo_Resultado.append(String.format("%.2f\n", Custo_T[i][j]));


                System.out.println("" + String.format("%.2f", Custo_T[i][j]));

                
            }
        }
        
        
        int tamanhoPopulacao = Integer.parseInt(Campo_Pop.getText());
        int tamanhoSolucao = calculo.getTamanhoProblema();
        float taxa_mutacao = Float.parseFloat(Campo_Muta.getText());

        int[][] pop = calculo.gerarPopulacaoInicial(tamanhoPopulacao, tamanhoSolucao);
        float[] avaliacoes = calculo.avaliarPopulacao(pop, tamanhoSolucao, Custo_O, Custo_T);

        // Mostrar população e avaliações no JTextArea
        mostrarResultado("População inicial e suas avaliações:");
        for (int i = 0; i < pop.length; i++) {
            StringBuilder sb = new StringBuilder();
            sb.append("Indivíduo ").append(i).append(": ");
            for (int j = 0; j < pop[i].length; j++) {
                sb.append(pop[i][j]).append(" ");
            }
            sb.append(" -> Avaliação: ").append(avaliacoes[i]);
            mostrarResultado(sb.toString());
        }

        // Criar uma lista para armazenar os indivíduos com avaliação < 3000
        List<int[]> individuosSelecionados = new ArrayList<>();

        // Selecionar os indivíduos com avaliação < 3000 e armazenar na lista
        for (int i = 0; i < pop.length; i++) {
            if (avaliacoes[i] < 3000) {
                individuosSelecionados.add(pop[i]);
            }
        }

        mostrarResultado("Indivíduos com avaliação < 3000:");
        for (int i = 0; i < individuosSelecionados.size(); i++) {
            StringBuilder sb = new StringBuilder();
            sb.append("Indivíduo ").append(i).append(": ");
            int[] individuo = individuosSelecionados.get(i);
            for (int valor : individuo) {
                sb.append(valor).append(" ");
            }
            mostrarResultado(sb.toString());
        }

        List<int[]> filhos = calculo.realizarCruzamento(individuosSelecionados, tamanhoPopulacao, tamanhoSolucao);

        mostrarResultado("Filhos gerados:");
        for (int i = 0; i < filhos.size(); i++) {
            StringBuilder sb = new StringBuilder();
            sb.append("Indivíduo ").append(i).append(": ");
            int[] individuo = filhos.get(i);
            for (int valor : individuo) {
                sb.append(valor).append(" ");
            }
            mostrarResultado(sb.toString());
        }
        
 // Converter List<int[]> filhos para int[][]
        int[][] filhosArray = new int[filhos.size()][];
        for (int i = 0; i < filhos.size(); i++) {
            filhosArray[i] = filhos.get(i);
        }

        // Aplicar mutação nos filhos
        calculo.aplicarMutacao(filhosArray, taxa_mutacao);

        // Exibir os filhos após a mutação
        mostrarResultado("Filhos após a mutação:");
        for (int i = 0; i < filhosArray.length; i++) {
            StringBuilder sb = new StringBuilder();
            sb.append("Indivíduo ").append(i).append(": ");
            int[] individuo = filhosArray[i];
            for (int valor : individuo) {
                sb.append(valor).append(" ");
            }
            mostrarResultado(sb.toString());
        }
        
         int[][] filhosAposMutacao = new int[filhos.size()][];
        for (int i = 0; i < filhos.size(); i++) {
            filhosAposMutacao[i] = filhos.get(i);
        }
        
        
    
   
        

        
    }//GEN-LAST:event_Btn_Iniciar_AlgActionPerformed

    private void Campo_PopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Campo_PopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Campo_PopActionPerformed

    private void Campo_MutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Campo_MutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Campo_MutaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Iniciar_Alg;
    private javax.swing.JTextField Campo_Muta;
    private javax.swing.JTextField Campo_Pop;
    private javax.swing.JTextArea Campo_Resultado;
    private javax.swing.JTextField Campo_Tam_Prob;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
